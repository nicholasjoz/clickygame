{"version":3,"sources":["components/Navbar.js","components/Header.js","components/Main.js","components/Footer.js","components/Image.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","message","correct","topscore","Header","Main","children","Footer","Image","src","alt","name","onClick","pickImg","App","state","picked","shuffleArray","array","imgArray","Img","i","length","j","Math","floor","random","_ref","console","log","_this","indexOf","setState","concat","imgSwitch","_this2","this","components_Navbar","components_Header","components_Main","map","image","components_Image","key","components_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wTAceA,SAXA,SAACC,GAAD,OAEbC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBAAhB,eACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,uBAAuBJ,EAAMK,SAC7CJ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,0CAAhB,UACSH,EAAAC,EAAAC,cAAA,YAAOH,EAAMM,SADtB,mBAEaL,EAAAC,EAAAC,cAAA,YAAOH,EAAMO,cCDfC,EAPA,kBACbP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,mBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,kHCGWK,EALF,SAACT,GAAD,OACPC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACZJ,EAAMU,WCOAC,EAVA,kBAEfV,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAhB,sDCCSQ,EAJD,SAACZ,GAAD,OACZC,EAAAC,EAAAC,cAAA,OAAKU,IAAKb,EAAMa,IAAKC,IAAKd,EAAMe,KAAMX,UAAU,iCAAiCY,QAAS,kBAAMhB,EAAMiB,QAAQjB,EAAMe,iBC6EvGG,6MAjEbC,MAAQ,CACNC,OAAQ,GACRd,QAAS,EACTC,SAAU,EACVF,QAAS,6BAKXgB,aAAe,SAACC,GAEd,IADA,IAAIC,EAAWC,EACNC,EAAIF,EAASG,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC5C,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADIM,EAEf,CAACR,EAASI,GAAIJ,EAASE,IAAnDF,EAASE,GAFkCM,EAAA,GAE9BR,EAASI,GAFqBI,EAAA,GAI9C,OAAOR,KAGTN,QAAU,SAACF,GACTiB,QAAQC,IAAI,aACZ,IAAIb,EAASc,EAAKf,MAAMC,QAEM,IAA1BA,EAAOe,QAAQpB,IACjBmB,EAAKE,SAAS,CACZhB,OAAQA,EAAOiB,OAAOtB,GACtBT,QAAS4B,EAAKf,MAAMb,QAAU,EAC9BC,SAAU2B,EAAKf,MAAMb,QAAU,EAAI4B,EAAKf,MAAMZ,SAAW2B,EAAKf,MAAMb,QAAU,EAAI4B,EAAKf,MAAMZ,SAC7FF,QAAS,uBAEX6B,EAAKb,gBAGLa,EAAKE,SAAS,CACZ/B,QAAS,sBACTC,QAAS,EACTc,OAAQ,QAMdkB,UAAY,SAACvB,6EASL,IAAAwB,EAAAC,KACN,OACEvC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsC,EAAD,CAAQnC,QAASkC,KAAKrB,MAAMb,QAASC,SAAUiC,KAAKrB,MAAMZ,SAAUF,QAASmC,KAAKrB,MAAMd,UACxFJ,EAAAC,EAAAC,cAACuC,EAAD,MACAzC,EAAAC,EAAAC,cAACwC,EAAD,KACGH,KAAKnB,aAAaG,GAAKoB,IAAI,SAAAC,GAAK,OAC/B5C,EAAAC,EAAAC,cAAC2C,EAAD,CAAOjC,IAAK0B,EAAKD,UAAUO,EAAM9B,MAAOA,KAAM8B,EAAM9B,KAAMgC,IAAKF,EAAM9B,KAAME,QAASsB,EAAKtB,aAG7FhB,EAAAC,EAAAC,cAAC6C,EAAD,cA7DUC,aCLEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.59e0bce8.chunk.js","sourcesContent":["import React from \"react\";\n\n// adapted from example \nconst Navbar = (props) => (\n\n  <nav className=\"navbar navbar-light bg-info\">\n    <span className=\"navbar-brand mb-0 h1\">Clicky Game</span>\n    <span className=\"text-center mb-0 h3\">{props.message}</span>\n    <span className=\"navbar-text text-dark font-weight-bold\">\n      Score: <span>{props.correct}</span>&nbsp;\n      Top Score: <span>{props.topscore}</span>\n    </span>\n  </nav>\n)\nexport default Navbar;","import React from \"react\";\n\nconst Header = () => (\n  <div className=\"jumbotron p-3\">\n    <h1 className=\"text-center\">Click the Pics!</h1>\n    <h3 className=\"text-center\">Click on an pic to earn points, but don't click on any more than once! Or else you are a dirty dirty cheater</h3>\n  </div>\n\n)\nexport default Header;","import React from \"react\";\n\n// copied from example\nconst Main = (props) =>\n      <div className=\"container text-center\">\n        {props.children}\n      </div>\n\nexport default Main;","import React from 'react';\n\nconst Footer = () => (\n\n<footer className=\"footer bg-info\">\n    <div className=\"container\">\n      <span className=\"text-dark\">Clicky Game - Time for a moderate level of fun!\n      </span>\n  </div>\n</footer>\n\n)\nexport default Footer;","import React from 'react';\n\n// copied from example\nconst Image = (props) => \n  <img src={props.src} alt={props.name} className=\"img-thumbnail clickable-images\" onClick={() => props.pickImg(props.name)} />\n\n\nexport default Image;","import React, { Component } from 'react';\n/* import logo from './logo.svg'; */\nimport './App.css';\n\nimport Navbar from \"./components/Navbar\";\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\nimport Footer from \"./components/Footer\";\nimport Image from \"./components/Image\";\nimport Img from \"./components/Img.json\"\n\n\n\n// insert images \n\nclass App extends Component {\n  state = {\n    picked: [],\n    correct: 0,\n    topscore: 0,\n    message: 'Click an image to begin'\n  };\n\n\n  //shuffle from stack overflow thread\n  shuffleArray = (array) => {\n    let imgArray = Img;\n    for (let i = imgArray.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [imgArray[i], imgArray[j]] = [imgArray[j], imgArray[i]];\n    }\n    return imgArray\n  }\n\n  pickImg = (name) => {\n    console.log(\"Clicked!!\");\n    let picked = this.state.picked;\n    \n    if (picked.indexOf(name) === -1) {\n      this.setState({\n        picked: picked.concat(name),\n        correct: this.state.correct + 1,\n        topscore: this.state.correct + 1 > this.state.topscore ? this.state.correct + 1 : this.state.topscore,\n        message: \"Correct! Spot on!!\" \n      })\n      this.shuffleArray();\n    }\n    else {\n      this.setState({\n        message: \"WRONG!! Play again?\",\n        correct: 0,\n        picked: []\n      })\n    }\n  }\n\n  // repeate switch / case for each possible selector\n  imgSwitch = (name) => {\n    /* switch (name) {\n      case \"P1\":\n        return `${P1}`\n      default:\n        return `${P0}`\n    }  */\n  }\n  \n render() {\n    return (\n      <div>\n        <Navbar correct={this.state.correct} topscore={this.state.topscore} message={this.state.message}/>\n        <Header />\n        <Main>\n          {this.shuffleArray(Img).map(image => (\n            <Image src={this.imgSwitch(image.name)} name={image.name} key={image.name} pickImg={this.pickImg}  />\n          ))}\n        </Main>\n        <Footer />\n      </div>\n    );\n  }\n}\nexport default App;\n\n\n// below from FriendCard example\n/* \nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    friends\n  };\n\n  removeFriend = id => {\n    // Filter this.state.friends for friends with an id not equal to the id being removed\n    const friends = this.state.friends.filter(friend => friend.id !== id);\n    // Set this.state.friends equal to the new friends array\n    this.setState({ friends });\n  };\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <Title>Friends List</Title>\n        {this.state.friends.map(friend => (\n          <FriendCard\n            removeFriend={this.removeFriend}\n            id={friend.id}\n            key={friend.id}\n            name={friend.name}\n            image={friend.image}\n            occupation={friend.occupation}\n            location={friend.location}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App; */\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}